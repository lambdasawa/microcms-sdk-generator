/* tslint:disable */
/* eslint-disable */
/**
 * microcms-sdk-generator-demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Articles,
    ArticlesFromJSON,
    ArticlesToJSON,
    ArticlesCreateRequest,
    ArticlesCreateRequestFromJSON,
    ArticlesCreateRequestToJSON,
    ArticlesList,
    ArticlesListFromJSON,
    ArticlesListToJSON,
    ArticlesPatchRequest,
    ArticlesPatchRequestFromJSON,
    ArticlesPatchRequestToJSON,
    CommonUpdateResult,
    CommonUpdateResultFromJSON,
    CommonUpdateResultToJSON,
} from '../models';

export interface CreateArticlesRequest {
    articlesCreateRequest: ArticlesCreateRequest;
}

export interface DeleteArticlesRequest {
    contentId: string;
}

export interface FetchArticlesRequest {
    contentId: string;
    draftKey?: string;
    fields?: Array<FetchArticlesFieldsEnum>;
    depth?: number;
}

export interface PutArticlesRequest {
    contentId: string;
    articlesCreateRequest: ArticlesCreateRequest;
}

export interface SearchArticlesRequest {
    draftKey?: string;
    limit?: number;
    offset?: number;
    orders?: Array<SearchArticlesOrdersEnum>;
    q?: string;
    ids?: Array<string>;
    fields?: Array<SearchArticlesFieldsEnum>;
    filters?: Array<string>;
    depth?: number;
}

export interface UpdateArticlesRequest {
    contentId: string;
    articlesPatchRequest: ArticlesPatchRequest;
}

/**
 * 
 */
export class ArticlesApi extends runtime.BaseAPI {

    /**
     */
    async createArticlesRaw(requestParameters: CreateArticlesRequest): Promise<runtime.ApiResponse<CommonUpdateResult>> {
        if (requestParameters.articlesCreateRequest === null || requestParameters.articlesCreateRequest === undefined) {
            throw new runtime.RequiredError('articlesCreateRequest','Required parameter requestParameters.articlesCreateRequest was null or undefined when calling createArticles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Write-API-Key"] = this.configuration.apiKey("X-Write-API-Key"); // WriteApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/articles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticlesCreateRequestToJSON(requestParameters.articlesCreateRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonUpdateResultFromJSON(jsonValue));
    }

    /**
     */
    async createArticles(requestParameters: CreateArticlesRequest): Promise<CommonUpdateResult> {
        const response = await this.createArticlesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteArticlesRaw(requestParameters: DeleteArticlesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling deleteArticles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Write-API-Key"] = this.configuration.apiKey("X-Write-API-Key"); // WriteApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/articles/{content-id}`.replace(`{${"content-id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteArticles(requestParameters: DeleteArticlesRequest): Promise<void> {
        await this.deleteArticlesRaw(requestParameters);
    }

    /**
     */
    async fetchArticlesRaw(requestParameters: FetchArticlesRequest): Promise<runtime.ApiResponse<Articles>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling fetchArticles.');
        }

        const queryParameters: any = {};

        if (requestParameters.draftKey !== undefined) {
            queryParameters['draftKey'] = requestParameters.draftKey;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = this.configuration.apiKey("X-API-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/articles/{content-id}`.replace(`{${"content-id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticlesFromJSON(jsonValue));
    }

    /**
     */
    async fetchArticles(requestParameters: FetchArticlesRequest): Promise<Articles> {
        const response = await this.fetchArticlesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async putArticlesRaw(requestParameters: PutArticlesRequest): Promise<runtime.ApiResponse<CommonUpdateResult>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling putArticles.');
        }

        if (requestParameters.articlesCreateRequest === null || requestParameters.articlesCreateRequest === undefined) {
            throw new runtime.RequiredError('articlesCreateRequest','Required parameter requestParameters.articlesCreateRequest was null or undefined when calling putArticles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Write-API-Key"] = this.configuration.apiKey("X-Write-API-Key"); // WriteApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/articles/{content-id}`.replace(`{${"content-id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArticlesCreateRequestToJSON(requestParameters.articlesCreateRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonUpdateResultFromJSON(jsonValue));
    }

    /**
     */
    async putArticles(requestParameters: PutArticlesRequest): Promise<CommonUpdateResult> {
        const response = await this.putArticlesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async searchArticlesRaw(requestParameters: SearchArticlesRequest): Promise<runtime.ApiResponse<ArticlesList>> {
        const queryParameters: any = {};

        if (requestParameters.draftKey !== undefined) {
            queryParameters['draftKey'] = requestParameters.draftKey;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.orders) {
            queryParameters['orders'] = requestParameters.orders.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filters) {
            queryParameters['filters'] = requestParameters.filters.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = this.configuration.apiKey("X-API-Key"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Global-Draft-Key"] = this.configuration.apiKey("X-Global-Draft-Key"); // GlobalDraftKeyAuth authentication
        }

        const response = await this.request({
            path: `/articles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticlesListFromJSON(jsonValue));
    }

    /**
     */
    async searchArticles(requestParameters: SearchArticlesRequest): Promise<ArticlesList> {
        const response = await this.searchArticlesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateArticlesRaw(requestParameters: UpdateArticlesRequest): Promise<runtime.ApiResponse<CommonUpdateResult>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling updateArticles.');
        }

        if (requestParameters.articlesPatchRequest === null || requestParameters.articlesPatchRequest === undefined) {
            throw new runtime.RequiredError('articlesPatchRequest','Required parameter requestParameters.articlesPatchRequest was null or undefined when calling updateArticles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Write-API-Key"] = this.configuration.apiKey("X-Write-API-Key"); // WriteApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/articles/{content-id}`.replace(`{${"content-id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ArticlesPatchRequestToJSON(requestParameters.articlesPatchRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonUpdateResultFromJSON(jsonValue));
    }

    /**
     */
    async updateArticles(requestParameters: UpdateArticlesRequest): Promise<CommonUpdateResult> {
        const response = await this.updateArticlesRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum FetchArticlesFieldsEnum {
    Title = 'title',
    Content = 'content',
    Category = 'category',
    Tag = 'tag',
    Deadline = 'deadline',
    Author = 'author'
}
/**
    * @export
    * @enum {string}
    */
export enum SearchArticlesOrdersEnum {
    title = 'title',
    titleDescending = '-title',
    content = 'content',
    contentDescending = '-content',
    category = 'category',
    categoryDescending = '-category',
    tag = 'tag',
    tagDescending = '-tag',
    deadline = 'deadline',
    deadlineDescending = '-deadline',
    author = 'author',
    authorDescending = '-author',
    id = 'id',
    idDescending = '-id',
    publishedAt = 'publishedAt',
    publishedAtDescending = '-publishedAt',
    createdAt = 'createdAt',
    createdAtDescending = '-createdAt',
    updatedAt = 'updatedAt',
    updatedAtDescending = '-updatedAt',
    revisedAt = 'revisedAt',
    revisedAtDescending = '-revisedAt'
}
/**
    * @export
    * @enum {string}
    */
export enum SearchArticlesFieldsEnum {
    Title = 'title',
    Content = 'content',
    Category = 'category',
    Tag = 'tag',
    Deadline = 'deadline',
    Author = 'author'
}
