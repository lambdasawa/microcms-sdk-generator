/* tslint:disable */
/* eslint-disable */
/**
 * microcms-sdk-generator-demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CommonUpdateResult,
    CommonUpdateResultFromJSON,
    CommonUpdateResultToJSON,
    Setting,
    SettingFromJSON,
    SettingToJSON,
    SettingPatchRequest,
    SettingPatchRequestFromJSON,
    SettingPatchRequestToJSON,
} from '../models';

export interface UpdateSettingRequest {
    settingPatchRequest: SettingPatchRequest;
}

/**
 * 
 */
export class SettingApi extends runtime.BaseAPI {

    /**
     */
    async fetchSettingRaw(): Promise<runtime.ApiResponse<Setting>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = this.configuration.apiKey("X-API-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/setting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingFromJSON(jsonValue));
    }

    /**
     */
    async fetchSetting(): Promise<Setting> {
        const response = await this.fetchSettingRaw();
        return await response.value();
    }

    /**
     */
    async updateSettingRaw(requestParameters: UpdateSettingRequest): Promise<runtime.ApiResponse<CommonUpdateResult>> {
        if (requestParameters.settingPatchRequest === null || requestParameters.settingPatchRequest === undefined) {
            throw new runtime.RequiredError('settingPatchRequest','Required parameter requestParameters.settingPatchRequest was null or undefined when calling updateSetting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Write-API-Key"] = this.configuration.apiKey("X-Write-API-Key"); // WriteApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/setting`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SettingPatchRequestToJSON(requestParameters.settingPatchRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonUpdateResultFromJSON(jsonValue));
    }

    /**
     */
    async updateSetting(requestParameters: UpdateSettingRequest): Promise<CommonUpdateResult> {
        const response = await this.updateSettingRaw(requestParameters);
        return await response.value();
    }

}
