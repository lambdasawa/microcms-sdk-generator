/* tslint:disable */
/* eslint-disable */
/**
 * microcms-sdk-generator-demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CommonUpdateResult,
    CommonUpdateResultFromJSON,
    CommonUpdateResultToJSON,
    Users,
    UsersFromJSON,
    UsersToJSON,
    UsersCreateRequest,
    UsersCreateRequestFromJSON,
    UsersCreateRequestToJSON,
    UsersList,
    UsersListFromJSON,
    UsersListToJSON,
    UsersPatchRequest,
    UsersPatchRequestFromJSON,
    UsersPatchRequestToJSON,
} from '../models';

export interface CreateUsersRequest {
    usersCreateRequest: UsersCreateRequest;
}

export interface DeleteUsersRequest {
    contentId: string;
}

export interface FetchUsersRequest {
    contentId: string;
    draftKey?: string;
    fields?: Array<FetchUsersFieldsEnum>;
    depth?: number;
}

export interface PutUsersRequest {
    contentId: string;
    usersCreateRequest: UsersCreateRequest;
}

export interface SearchUsersRequest {
    draftKey?: string;
    limit?: number;
    offset?: number;
    orders?: Array<SearchUsersOrdersEnum>;
    q?: string;
    ids?: Array<string>;
    fields?: Array<SearchUsersFieldsEnum>;
    filters?: Array<string>;
    depth?: number;
}

export interface UpdateUsersRequest {
    contentId: string;
    usersPatchRequest: UsersPatchRequest;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     */
    async createUsersRaw(requestParameters: CreateUsersRequest): Promise<runtime.ApiResponse<CommonUpdateResult>> {
        if (requestParameters.usersCreateRequest === null || requestParameters.usersCreateRequest === undefined) {
            throw new runtime.RequiredError('usersCreateRequest','Required parameter requestParameters.usersCreateRequest was null or undefined when calling createUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Write-API-Key"] = this.configuration.apiKey("X-Write-API-Key"); // WriteApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UsersCreateRequestToJSON(requestParameters.usersCreateRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonUpdateResultFromJSON(jsonValue));
    }

    /**
     */
    async createUsers(requestParameters: CreateUsersRequest): Promise<CommonUpdateResult> {
        const response = await this.createUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteUsersRaw(requestParameters: DeleteUsersRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling deleteUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Write-API-Key"] = this.configuration.apiKey("X-Write-API-Key"); // WriteApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/users/{content-id}`.replace(`{${"content-id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteUsers(requestParameters: DeleteUsersRequest): Promise<void> {
        await this.deleteUsersRaw(requestParameters);
    }

    /**
     */
    async fetchUsersRaw(requestParameters: FetchUsersRequest): Promise<runtime.ApiResponse<Users>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling fetchUsers.');
        }

        const queryParameters: any = {};

        if (requestParameters.draftKey !== undefined) {
            queryParameters['draftKey'] = requestParameters.draftKey;
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = this.configuration.apiKey("X-API-Key"); // ApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/users/{content-id}`.replace(`{${"content-id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersFromJSON(jsonValue));
    }

    /**
     */
    async fetchUsers(requestParameters: FetchUsersRequest): Promise<Users> {
        const response = await this.fetchUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async putUsersRaw(requestParameters: PutUsersRequest): Promise<runtime.ApiResponse<CommonUpdateResult>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling putUsers.');
        }

        if (requestParameters.usersCreateRequest === null || requestParameters.usersCreateRequest === undefined) {
            throw new runtime.RequiredError('usersCreateRequest','Required parameter requestParameters.usersCreateRequest was null or undefined when calling putUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Write-API-Key"] = this.configuration.apiKey("X-Write-API-Key"); // WriteApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/users/{content-id}`.replace(`{${"content-id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UsersCreateRequestToJSON(requestParameters.usersCreateRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonUpdateResultFromJSON(jsonValue));
    }

    /**
     */
    async putUsers(requestParameters: PutUsersRequest): Promise<CommonUpdateResult> {
        const response = await this.putUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async searchUsersRaw(requestParameters: SearchUsersRequest): Promise<runtime.ApiResponse<UsersList>> {
        const queryParameters: any = {};

        if (requestParameters.draftKey !== undefined) {
            queryParameters['draftKey'] = requestParameters.draftKey;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.orders) {
            queryParameters['orders'] = requestParameters.orders.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.filters) {
            queryParameters['filters'] = requestParameters.filters.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.depth !== undefined) {
            queryParameters['depth'] = requestParameters.depth;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = this.configuration.apiKey("X-API-Key"); // ApiKeyAuth authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Global-Draft-Key"] = this.configuration.apiKey("X-Global-Draft-Key"); // GlobalDraftKeyAuth authentication
        }

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersListFromJSON(jsonValue));
    }

    /**
     */
    async searchUsers(requestParameters: SearchUsersRequest): Promise<UsersList> {
        const response = await this.searchUsersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateUsersRaw(requestParameters: UpdateUsersRequest): Promise<runtime.ApiResponse<CommonUpdateResult>> {
        if (requestParameters.contentId === null || requestParameters.contentId === undefined) {
            throw new runtime.RequiredError('contentId','Required parameter requestParameters.contentId was null or undefined when calling updateUsers.');
        }

        if (requestParameters.usersPatchRequest === null || requestParameters.usersPatchRequest === undefined) {
            throw new runtime.RequiredError('usersPatchRequest','Required parameter requestParameters.usersPatchRequest was null or undefined when calling updateUsers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Write-API-Key"] = this.configuration.apiKey("X-Write-API-Key"); // WriteApiKeyAuth authentication
        }

        const response = await this.request({
            path: `/users/{content-id}`.replace(`{${"content-id"}}`, encodeURIComponent(String(requestParameters.contentId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UsersPatchRequestToJSON(requestParameters.usersPatchRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CommonUpdateResultFromJSON(jsonValue));
    }

    /**
     */
    async updateUsers(requestParameters: UpdateUsersRequest): Promise<CommonUpdateResult> {
        const response = await this.updateUsersRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum FetchUsersFieldsEnum {
    Name = 'name',
    Email = 'email',
    Bio = 'bio',
    Icon = 'icon',
    Birthday = 'birthday',
    IsSnsPublic = 'is_sns_public',
    Twitter = 'twitter',
    Github = 'github'
}
/**
    * @export
    * @enum {string}
    */
export enum SearchUsersOrdersEnum {
    name = 'name',
    nameDescending = '-name',
    email = 'email',
    emailDescending = '-email',
    bio = 'bio',
    bioDescending = '-bio',
    icon = 'icon',
    iconDescending = '-icon',
    birthday = 'birthday',
    birthdayDescending = '-birthday',
    is_sns_public = 'is_sns_public',
    is_sns_publicDescending = '-is_sns_public',
    twitter = 'twitter',
    twitterDescending = '-twitter',
    github = 'github',
    githubDescending = '-github',
    id = 'id',
    idDescending = '-id',
    publishedAt = 'publishedAt',
    publishedAtDescending = '-publishedAt',
    createdAt = 'createdAt',
    createdAtDescending = '-createdAt',
    updatedAt = 'updatedAt',
    updatedAtDescending = '-updatedAt',
    revisedAt = 'revisedAt',
    revisedAtDescending = '-revisedAt'
}
/**
    * @export
    * @enum {string}
    */
export enum SearchUsersFieldsEnum {
    Name = 'name',
    Email = 'email',
    Bio = 'bio',
    Icon = 'icon',
    Birthday = 'birthday',
    IsSnsPublic = 'is_sns_public',
    Twitter = 'twitter',
    Github = 'github'
}
