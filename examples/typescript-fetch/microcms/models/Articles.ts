/* tslint:disable */
/* eslint-disable */
/**
 * microcms-sdk-generator-demo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Users,
    UsersFromJSON,
    UsersFromJSONTyped,
    UsersToJSON,
} from './';

/**
 * 
 * @export
 * @interface Articles
 */
export interface Articles {
    /**
     * 
     * @type {Users}
     * @memberof Articles
     */
    author: Users;
    /**
     * カテゴリ
     * @type {Array<string>}
     * @memberof Articles
     */
    category: Array<ArticlesCategoryEnum>;
    /**
     * 本文
     * @type {string}
     * @memberof Articles
     */
    content: string;
    /**
     * 
     * @type {Date}
     * @memberof Articles
     */
    createdAt: Date;
    /**
     * 締切日時
     * @type {Date}
     * @memberof Articles
     */
    deadline: Date;
    /**
     * 
     * @type {string}
     * @memberof Articles
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof Articles
     */
    publishedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof Articles
     */
    revisedAt: Date;
    /**
     * タグ
     * @type {Array<string>}
     * @memberof Articles
     */
    tag: Array<ArticlesTagEnum>;
    /**
     * タイトル
     * @type {string}
     * @memberof Articles
     */
    title: string;
    /**
     * 
     * @type {Date}
     * @memberof Articles
     */
    updatedAt: Date;
}

/**
* @export
* @enum {string}
*/
export enum ArticlesCategoryEnum {
    Programming = 'programming',
    Game = 'game'
}/**
* @export
* @enum {string}
*/
export enum ArticlesTagEnum {
    Typescript = 'typescript',
    Golang = 'golang',
    Java = 'java'
}

export function ArticlesFromJSON(json: any): Articles {
    return ArticlesFromJSONTyped(json, false);
}

export function ArticlesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Articles {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'author': UsersFromJSON(json['author']),
        'category': json['category'],
        'content': json['content'],
        'createdAt': (new Date(json['createdAt'])),
        'deadline': (new Date(json['deadline'])),
        'id': json['id'],
        'publishedAt': (new Date(json['publishedAt'])),
        'revisedAt': (new Date(json['revisedAt'])),
        'tag': json['tag'],
        'title': json['title'],
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function ArticlesToJSON(value?: Articles | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'author': UsersToJSON(value.author),
        'category': value.category,
        'content': value.content,
        'createdAt': (value.createdAt.toISOString()),
        'deadline': (value.deadline.toISOString()),
        'id': value.id,
        'publishedAt': (value.publishedAt.toISOString()),
        'revisedAt': (value.revisedAt.toISOString()),
        'tag': value.tag,
        'title': value.title,
        'updatedAt': (value.updatedAt.toISOString()),
    };
}


